# Using "merge_request into main" workflow (https://docs.gitlab.com/ee/ci/yaml/workflow.html)
include:
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"

stages:
  - build
  - test
  - deploy

# GitLab CI: Auto dependency updates https://thacoon.com/posts/gitlab-ci-auto-dependency-update/
# `GIT_PUSH_TOKEN` CI/CD variable = personal access token (PAT) with write access
update-julia:
  image: julia:1.7
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    JULIA_PKG_PRECOMPILE_AUTO: 0
  script:
    - apt-get update && apt-get install -y --no-install-recommends git
    - julia --color=yes --threads=auto --project=@. -e 'import Pkg; Pkg.update()'
    # Open a MR when there is a update, requires GIT_PUSH_TOKEN` CI/CD variable = personal access token (PAT) with write access
    - |
      if [[ -n $(git status --porcelain) ]]; then
        echo "Commiting updates"
        NEW_BR=auto-update-$(date '+%Y-%m-%d-%H-%M-%S')
        git config --global user.name "${GITLAB_USER_NAME}"
        git config --global user.email "${GITLAB_USER_EMAIL}"
        git checkout -b ${NEW_BR}
        git add .
        git commit -m "${NEW_BR}"
        git push "https://${GITLAB_USER_NAME}:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" \
            -o merge_request.create \
            -o merge_request.target="${CI_DEFAULT_BRANCH}" \
            -o merge_request.merge_when_pipeline_succeeds \
            -o merge_request.remove_source_branch \
            -o merge_request.title="${NEW_BR}" \
            -o merge_request.label="automated update" \
            -o merge_request.assign="${GITLAB_USER_NAME}"
        exit;
      else
        echo "no change, nothing to commit"
      fi

build-notebooks:
  image: registry.gitlab.com/sosiristseng/docker-juliabook:latest
  # tags:
  #   - your_runner
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  variables:
    JULIA_DEPOT_PATH: "$CI_PROJECT_PATH/.julia"
  cache:
    - key:
        files:
          - Project.toml
          - Manifest.toml
          - requirements.txt
        prefix: jb
      paths:
        - docs/_build/.jupyter_cache
    - key:
        files:
          - Project.toml
          - Manifest.toml
        prefix: julia
      paths:
        - $CI_PROJECT_PATH/.julia/artifacts
        - $CI_PROJECT_PATH/.julia/compiled
        - $CI_PROJECT_PATH/.julia/packages
        - $CI_PROJECT_PATH/.julia/registries
  before_script:
    - julia --project=@. -e 'using Pkg; Pkg.instantiate()'
    - julia -e 'using Pkg; Pkg.add("IJulia"); Pkg.build("IJulia")'
    # Uncomment if you want parallel notebook execution
    # - find docs -type f -name "*.ipynb" -print0 | parallel -0 -j2 jupyter nbconvert --to notebook --ExecutePreprocessor.timeout=600 --ExecutePreprocessor.kernel_name=julia-1.7 --execute --inplace {}
    - jupyter-book build docs --warningiserror --keep-going -v
  script:
    - "Test build completed."
  artifacts:
    paths:
      - docs/_build/

pages:
  extends: build-notebooks
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
  script:
    - mv docs/_build/html public
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\|svg\|xml\)$' -exec gzip -f -k {} \; -exec  -f -k {} \; || echo 'Compression failed. Skipping...'
  artifacts:
    paths:
      - public
