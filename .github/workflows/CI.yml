name: CI with dynamic parallel matrix

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TIMEOUT: '-1'    # nbconvert timeout
  EXTRA_ARGS: ''   # Extra arguments for nbconvert
  PYTHON_VER: '3.11'
  JULIA_CPU_TARGET: 'generic;haswell,clone_all'
  JULIA_NUM_THREADS: 'auto'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_CI: 'true'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Read Julia version
        uses: SebRollen/toml-action@v1.0.2
        id: read_toml
        with:
          file: 'Manifest.toml'
          field: 'julia_version'
      - name: Install Julia using jill.sh
        run: |
          wget -O /tmp/jill.sh https://raw.githubusercontent.com/abelsiqueira/jill/main/jill.sh
          bash /tmp/jill.sh --version ${{ steps.read_toml.outputs.value }} -y
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Cache Julia deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.julia/artifacts
            ~/.julia/compiled
            ~/.julia/packages
            ~/.julia/environments
            ~/.local/share/jupyter/
          key: ${{ runner.os }}-jill-${{ hashFiles('src/**','Project.toml', 'Manifest.toml')}}
          restore-keys: |
            ${{ runner.os }}-jill-
      - name: Setup Python
        uses: actions/setup-python@v4
        id: python3
        with:
          python-version: ${{ env.PYTHON_VER }}
      - name: Install Julia deps
        env:
          PYTHON: ${{ steps.python3.outputs.python-path }}
          JULIA_PYTHONCALL_EXE: ${{ steps.python3.outputs.python-path }}
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.add(["IJulia"])
          using IJulia
          IJulia.installkernel("Julia", "--project=@.")
          Pkg.activate(".")
          Pkg.instantiate()
          Pkg.gc()
      - name: List notebooks as a JSON array
        id: set-matrix
        working-directory: docs
        run: echo "matrix=$(python -c 'import glob, json; print(json.dumps(glob.glob("**/*.ipynb", recursive=True)))')" >> "$GITHUB_OUTPUT"

  execute:
    needs: setup
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        # Notebooks need to be executed
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Restore notebook if present
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: docs/${{ matrix.notebook }}
          key: ${{ runner.os }}-notebook-${{ hashFiles(format('docs/{0}', matrix.notebook), 'src/**', 'Project.toml', 'Manifest.toml') }}
      - name: Setup Python
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}
          cache: 'pip'
      - name: Install Python deps
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: python -m pip install nbconvert -r requirements.txt
      - name: Read Julia version
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: SebRollen/toml-action@v1.0.2
        id: read_toml
        with:
          file: 'Manifest.toml'
          field: 'julia_version'
      - name: Install Julia using jill.sh
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          wget -O /tmp/jill.sh https://raw.githubusercontent.com/abelsiqueira/jill/main/jill.sh
          bash /tmp/jill.sh --version ${{ steps.read_toml.outputs.value }} -y
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Cache Julia deps
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.julia/artifacts
            ~/.julia/compiled
            ~/.julia/packages
            ~/.julia/environments
            ~/.local/share/jupyter/
          key: ${{ runner.os }}-jill-${{ hashFiles('src/**','Project.toml', 'Manifest.toml')}}
      - name: Execute Notebook
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: >
          jupyter nbconvert --to notebook --execute --inplace ${{ env.EXTRA_ARGS }}
          --ExecutePreprocessor.timeout=${{ env.TIMEOUT }}
          --ExecutePreprocessor.kernel_name=julia-1.$(julia -e 'print(VERSION.minor)')
          docs/${{ matrix.notebook }}
      - name: Cache notebook
        uses: actions/cache/save@v3
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        with:
          path: docs/${{ matrix.notebook }}
          key: ${{ steps.cache.outputs.cache-primary-key }}
      - name: Upload Notebook
        uses: actions/upload-artifact@v3
        with:
          name: notebooks
          path: docs*/${{ matrix.notebook }}  # keep folder structure
          retention-days: 1

  render:
    needs: execute
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebooks
          path: out/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: out
      - name: Copy back built notebooks
        run: cp --verbose -rf out/docs/* docs/
      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: jupyterbook.yml
          init-shell: bash
          cache-environment: true
          post-cleanup: all
      - name: Build website
        shell: micromamba-shell {0}
        run: jupyter-book build docs/
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/_build/html

  # CI conclusion for GitHub status check
  # Adaped from https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: render
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ ${{ needs.render.result }} == "success" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  # Deployment job
  deploy:
    name: Deploy to GitHub pages
    needs: render
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
