name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: .ci/Dockerfile
          tags: ${{ env.IMAGE_NAME }}:test
          outputs: type=cacheonly
          cache-from: type=gha
          cache-to: type=gha,mode=max

  execute:
    needs: docker
    env:
      TIMEOUT: 1000
    strategy:
      fail-fast: false
      matrix:
        # Notebooks to be executed
        notebook:
          - index
          - expression-level-effects
          - expression-level
          - model-desc
          - steadystates
          - validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Load Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: .ci/Dockerfile
          tags: ${{ env.IMAGE_NAME }}:test
          load: true
          cache-from: type=gha
      - name: Execute Notebook
        run: >
          docker run
          -v ${{ github.workspace }}:/work
          -e JULIA_NUM_THREADS=auto
          ${{ env.IMAGE_NAME }}:test
          jupyter nbconvert --to notebook --ExecutePreprocessor.timeout=${{ env.TIMEOUT }} --execute --inplace
          /work/docs/${{ matrix.notebook }}.ipynb
      - name: Upload a Notebook
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.notebook }}
          path: docs/${{ matrix.notebook }}.ipynb

  jupyter-book:
    needs: execute
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sosiristseng/docker-jupyterbook:0.13.1
    # store success output flag for ci job
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download notebooks
        uses: actions/download-artifact@v3
        with:
          path: out/
      - name: Move notebooks
        run: find out/ -type f -iname '*.ipynb' -exec mv -t docs/ {} +
      - name: Build website
        run: jupyter-book build docs/ -W -v
      - name: Set output flag
        id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT
      - name: Upload page artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/_build/html

  # This job is for GitHub status check
  # https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  ci:
    needs: [execute, jupyter-book]
    runs-on: ubuntu-latest
    if: always() # always run, so we never skip the check
    steps:
      # pass step only when output of previous jupyter-book job is set
      # in case at least one of the execution fails, jupyter-book is skipped
      # and the output will not be set, which will then cause the ci job to fail
      - run: |
          passed="${{ needs.jupyter-book.outputs.success }}"
          if [[ $passed == "true" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi


  docker-push:
    needs: [docker, execute]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,priority=600, enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
          flavor: |
            latest=false
      - name: Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: .ci/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy pages
  deploy:
    needs: jupyter-book
    if: github.ref == 'refs/heads/main'
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
